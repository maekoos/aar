//! DO NOT EDIT THIS FILE (generated.rs)
//! IT HAS BEEN GENERATED BY dex-parser-gen/generate.py


use crate::parser::{InstructionQueue, ParserError};
use log::error;
use ux::u4;

macro_rules! split_byte {
  ($b:expr) => {
    (u4::new(($b as u8 & 0xf)), u4::new(($b as u8 >> 4)))
  };
}

macro_rules! join_bytes {
  (16, $b0:expr, $b1:expr) => {
    u16::from_le_bytes([$b0 as u8, $b1 as u8])
  };
  (32, $b0:expr, $b1:expr, $b2:expr, $b3:expr) => {
    u32::from_le_bytes([$b0 as u8, $b1 as u8, $b2 as u8, $b3 as u8])
  };
  (64, $b0:expr, $b1:expr, $b2:expr, $b3:expr, $b4:expr, $b5:expr, $b6:expr, $b7:expr) => {
    u64::from_le_bytes([
      $b0 as u8, $b1 as u8, $b2 as u8, $b3 as u8, $b4 as u8, $b5 as u8, $b6 as u8, $b7 as u8,
    ])
  };
}

#[derive(Debug, Clone)]
pub struct IF10t(pub i8);
#[derive(Debug, Clone)]
pub struct IF20t(pub i16);
#[derive(Debug, Clone)]
pub struct IF30t(pub i32);
#[derive(Debug, Clone)]
pub struct IF10x();
#[derive(Debug, Clone)]
pub struct IF11n(pub u4, pub u4);
#[derive(Debug, Clone)]
pub struct IF21s(pub u8, pub i16);
#[derive(Debug, Clone)]
pub struct IF21h(pub u8, pub u16);
#[derive(Debug, Clone)]
pub struct IF31i(pub u8, pub u32);
#[derive(Debug, Clone)]
pub struct IF51l(pub u8, pub u64);
#[derive(Debug, Clone)]
pub struct IF11x(pub u8);
#[derive(Debug, Clone)]
pub struct IF12x(pub u4, pub u4);
#[derive(Debug, Clone)]
pub struct IF22x(pub u8, pub u16);
#[derive(Debug, Clone)]
pub struct IF23x(pub u8, pub u8, pub u8);
#[derive(Debug, Clone)]
pub struct IF32x(pub u16, pub u16);
#[derive(Debug, Clone)]
pub struct IF21c(pub u8, pub u16);
#[derive(Debug, Clone)]
pub struct IF31c(pub u8, pub u32);
#[derive(Debug, Clone)]
pub struct IF21t(pub u8, pub u16);
#[derive(Debug, Clone)]
pub struct IF31t(pub u8, pub u32);
#[derive(Debug, Clone)]
pub struct IF22b(pub u8, pub u8, pub i8);
#[derive(Debug, Clone)]
pub struct IF22s(pub u4, pub u4, pub i16);
#[derive(Debug, Clone)]
pub struct IF22c(pub u4, pub u4, pub u16);
#[derive(Debug, Clone)]
pub struct IF22t(pub u4, pub u4, pub i16);
#[derive(Debug, Clone)]
pub struct IF35c(pub u16, pub u4, pub u4, pub u4, pub u4, pub u4, pub u4);
#[derive(Debug, Clone)]
pub struct IF3rc(pub u16, pub u16, pub u8);
#[derive(Debug, Clone)]
pub struct IF00x();
#[derive(Debug, Clone)]
pub struct IF20bc(pub u8, pub u16);
#[derive(Debug, Clone)]
pub struct IF22cs(pub u4, pub u4, pub u16);
#[derive(Debug, Clone)]
pub struct IF35mi(pub u16, pub u4, pub u4, pub u4, pub u4, pub u4, pub u4);
#[derive(Debug, Clone)]
pub struct IF35ms(pub u16, pub u4, pub u4, pub u4, pub u4, pub u4, pub u4);
#[derive(Debug, Clone)]
pub struct IF3rmi(pub u16, pub u16, pub u8);
#[derive(Debug, Clone)]
pub struct IF3rms(pub u16, pub u16, pub u8);
#[derive(Debug, Clone)]
pub struct IFPackedSwitch(pub u8, pub i32, pub Vec<i32>);
#[derive(Debug, Clone)]
pub struct IFSparseSwitch(pub u8, pub Vec<(i32, i32)>);
#[derive(Debug, Clone)]
pub struct IFFillArrayData(pub u8, pub Vec<u8>);

macro_rules! instr_format {
  (10t, $q:expr) => {{
    let b0 = $q.incr()?;
    IF10t(b0 as i8)
  }};
  (20t, $q:expr) => {{
    let _b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF20t(join_bytes!(16, b1, b2) as i16)
  }};
  (30t, $q:expr) => {{
    let _b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    IF30t(join_bytes!(32, b1, b2, b3, b4) as i32)
  }};
  (10x, $q:expr) => {{
    let _b0 = $q.incr()?;

    IF10x()
  }};
  (11n, $q:expr) => {{
    let b0 = $q.incr()?;
    let (a, b) = split_byte!(b0);

    IF11n(a, b)
  }};
  (21s, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF21s(b0, join_bytes!(16, b1, b2) as i16)
  }};
  (21h, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF21h(b0, join_bytes!(16, b1, b2))
  }};
  (31i, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    IF31i(b0, join_bytes!(32, b1, b2, b3, b4))
  }};
  (51l, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;
    let b5 = $q.incr()?;
    let b6 = $q.incr()?;
    let b7 = $q.incr()?;
    let b8 = $q.incr()?;

    IF51l(b0, join_bytes!(64, b1, b2, b3, b4, b5, b6, b7, b8))
  }};
  (11x, $q:expr) => {{
    let b0 = $q.incr()?;

    IF11x(b0)
  }};
  (12x, $q:expr) => {{
    let b0 = $q.incr()?;
    let (a, b) = split_byte!(b0);
    IF12x(a, b)
  }};
  (22x, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF22x(b0, join_bytes!(16, b1, b2))
  }};
  (23x, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF23x(b0, b1, b2)
  }};
  (32x, $q:expr) => {{
    let _b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    IF32x(join_bytes!(16, b1, b2), join_bytes!(16, b3, b4))
  }};
  (21c, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF21c(b0, join_bytes!(16, b1, b2))
  }};
  (31c, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    IF31c(b0, join_bytes!(32, b1, b2, b3, b4))
  }};
  (21t, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF21t(b0, join_bytes!(16, b1, b2))
  }};
  (31t, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    IF31t(b0, join_bytes!(32, b1, b2, b3, b4))
  }};
  (22b, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF22b(b0, b1, b2 as i8)
  }};
  (22s, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let (a, b) = split_byte!(b0);
    IF22s(a, b, join_bytes!(16, b1, b2) as i16)
  }};
  (22c, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let (a, b) = split_byte!(b0);
    IF22c(a, b, join_bytes!(16, b1, b2) as u16)
  }};
  (22t, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let (a, b) = split_byte!(b0);
    IF22t(a, b, join_bytes!(16, b1, b2) as i16)
  }};
  (35c, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    let (g, count) = split_byte!(b0);
    let b = join_bytes!(16, b1, b2);
    let (e, f) = split_byte!(b4);
    let (c, d) = split_byte!(b3);
    IF35c(b, count, c, d, e, f, g)
  }};
  (3rc, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    IF3rc(join_bytes!(16, b1, b2), join_bytes!(16, b3, b4), b0)
  }};
  (00x, $q:expr) => {{
    IF00x()
  }};
  (20bc, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    IF20bc(b0, join_bytes!(16, b1, b2))
  }};
  (22cs, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;

    let (a, b) = split_byte!(b0);
    IF22cs(a, b, join_bytes!(16, b1, b2))
  }};
  (35mi, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    let b = join_bytes!(16, b1, b2);
    let (a, g) = split_byte!(b0);
    let (c, d) = split_byte!(b3);
    let (e, f) = split_byte!(b4);
    IF35mi(b, a, c, d, e, f, g)
  }};
  (35ms, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    let b = join_bytes!(16, b1, b2);
    let (a, g) = split_byte!(b0);
    let (c, d) = split_byte!(b3);
    let (e, f) = split_byte!(b4);
    IF35ms(b, a, c, d, e, f, g)
  }};
  (3rmi, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    IF3rmi(join_bytes!(16, b1, b2), join_bytes!(16, b3, b4), b0)
  }};
  (3rms, $q:expr) => {{
    let b0 = $q.incr()?;
    let b1 = $q.incr()?;
    let b2 = $q.incr()?;
    let b3 = $q.incr()?;
    let b4 = $q.incr()?;

    IF3rms(join_bytes!(16, b1, b2), join_bytes!(16, b3, b4), b0)
  }};


  (PackedSwitch, $q:expr) => {{
    let instr: IF31t = instr_format!(31t, $q);
    let register_to_test = instr.0;
    let offset = instr.1 as i32;

    if offset < 0 {
      error!("Packed switch: Offset is negative. Not supported.");
      unimplemented!();
    }

    $q.jmp(offset * 2 - 5)?;

    assert_eq!($q.incr_nop()?, 0x00);
    assert_eq!($q.incr_nop()?, 0x01);

    let size = join_bytes!(16, $q.incr_nop()?, $q.incr_nop()?);
    // let tot_size = (size * 2) + 4;
    let first_key: i32 = join_bytes!(32, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?) as i32;
    let mut targets: Vec<i32> = vec![];
    for _ in (0..size) {
      targets.push(join_bytes!(32, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?) as i32);
    }

    $q.jmp_back()?;

    IFPackedSwitch(register_to_test, first_key, targets)
  }};
  (SparseSwitch, $q:expr) => {{
    let instr: IF31t = instr_format!(31t, $q);
    let register_to_test = instr.0;
    let offset = instr.1 as i32;

    if offset < 0 {
      error!("Sparse switch: Offset is negative. Not supported.");
      unimplemented!();
    }

    $q.jmp(offset * 2 - 5)?;

    assert_eq!($q.incr_nop()?, 0x00);
    assert_eq!($q.incr_nop()?, 0x02);

    let size = join_bytes!(16, $q.incr_nop()?, $q.incr_nop()?);
    // let tot_size = (size * 4) + 2;
    let mut keys: Vec<i32> = vec![];
    let mut targets: Vec<i32> = vec![];
    for _ in (0..size) {
      keys.push(join_bytes!(32, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?) as i32);
    }
    for _ in (0..size) {
      targets.push(join_bytes!(32, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?) as i32);
    }
    let mut c = 0;
    let key_targets: Vec<(i32, i32)> = keys.into_iter().map(|key| {c+=1; (key, targets[c-1])}).collect();

    $q.jmp_back()?;

    IFSparseSwitch(register_to_test, key_targets)
  }};
  (FillArrayData, $q:expr) => {{
    let instr: IF31t = instr_format!(31t, $q);
    let array_reference = instr.0;
    let offset = instr.1 as i32;

    if offset < 0 {
      error!("Fill array data: Offset is negative. Not supported.");
      unimplemented!();
    }

    $q.jmp(offset * 2 - 5)?;

    assert_eq!($q.incr_nop()?, 0x00);
    assert_eq!($q.incr_nop()?, 0x03);

    let element_width	= join_bytes!(16, $q.incr_nop()?, $q.incr_nop()?);
    let size = join_bytes!(32, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?, $q.incr_nop()?);
    // let tot_size = (size * element_width as u32 + 1) / 2 + 4;

    let mut data: Vec<u8> = vec![];

    for _ in (0..size * element_width as u32) {
      data.push($q.incr_nop()?);
    }

    $q.jmp_back()?;

    IFFillArrayData(array_reference, data)
  }};
}



#[derive(Debug, Clone)]
pub enum ASTInstruction{
	Nop(IF10x), // 10x
	Move(IF12x), // 12x
	MoveFrom16(IF22x), // 22x
	Move16(IF32x), // 32x
	MoveWide(IF12x), // 12x
	MoveWideFrom16(IF22x), // 22x
	MoveWide16(IF32x), // 32x
	MoveObject(IF12x), // 12x
	MoveObjectFrom16(IF22x), // 22x
	MoveObject16(IF32x), // 32x
	MoveResult(IF11x), // 11x
	MoveResultWide(IF11x), // 11x
	MoveResultObject(IF11x), // 11x
	MoveException(IF11x), // 11x
	ReturnVoid(IF10x), // 10x
	Return(IF11x), // 11x
	ReturnWide(IF11x), // 11x
	ReturnObject(IF11x), // 11x
	Const4(IF11n), // 11n
	Const16(IF21s), // 21s
	Const(IF31i), // 31i
	ConstHigh16(IF21h), // 21h
	ConstWide16(IF21s), // 21s
	ConstWide32(IF31i), // 31i
	ConstWide(IF51l), // 51l
	ConstWideHigh16(IF21h), // 21h
	ConstString(IF21c), // 21c
	ConstStringJumbo(IF31c), // 31c
	ConstClass(IF21c), // 21c
	MonitorEnter(IF11x), // 11x
	MonitorExit(IF11x), // 11x
	CheckCast(IF21c), // 21c
	InstanceOf(IF22c), // 22c
	ArrayLength(IF12x), // 12x
	NewInstance(IF21c), // 21c
	NewArray(IF22c), // 22c
	FilledNewArray(IF35c), // 35c
	FilledNewArrayRange(IF3rc), // 3rc
	FillArrayData(IFFillArrayData), // 31t
	Throw(IF11x), // 11x
	Goto(IF10t), // 10t
	Goto16(IF20t), // 20t
	Goto32(IF30t), // 30t
	PackedSwitch(IFPackedSwitch), // 31t
	SparseSwitch(IFSparseSwitch), // 31t
	CmplFloat(IF23x), // 23x
	CmpgFloat(IF23x), // 23x
	CmplDouble(IF23x), // 23x
	CmpgDouble(IF23x), // 23x
	CmpLong(IF23x), // 23x
	IfEq(IF22t), // 22t
	IfNe(IF22t), // 22t
	IfLt(IF22t), // 22t
	IfGe(IF22t), // 22t
	IfGt(IF22t), // 22t
	IfLe(IF22t), // 22t
	IfEqz(IF21t), // 21t
	IfNez(IF21t), // 21t
	IfLtz(IF21t), // 21t
	IfGez(IF21t), // 21t
	IfGtz(IF21t), // 21t
	IfLez(IF21t), // 21t
	Aget(IF23x), // 23x
	AgetWide(IF23x), // 23x
	AgetObject(IF23x), // 23x
	AgetBoolean(IF23x), // 23x
	AgetByte(IF23x), // 23x
	AgetChar(IF23x), // 23x
	AgetShort(IF23x), // 23x
	Aput(IF23x), // 23x
	AputWide(IF23x), // 23x
	AputObject(IF23x), // 23x
	AputBoolean(IF23x), // 23x
	AputByte(IF23x), // 23x
	AputChar(IF23x), // 23x
	AputShort(IF23x), // 23x
	Iget(IF22c), // 22c
	IgetWide(IF22c), // 22c
	IgetObject(IF22c), // 22c
	IgetBoolean(IF22c), // 22c
	IgetByte(IF22c), // 22c
	IgetChar(IF22c), // 22c
	IgetShort(IF22c), // 22c
	Iput(IF22c), // 22c
	IputWide(IF22c), // 22c
	IputObject(IF22c), // 22c
	IputBoolean(IF22c), // 22c
	IputByte(IF22c), // 22c
	IputChar(IF22c), // 22c
	IputShort(IF22c), // 22c
	Sget(IF21c), // 21c
	SgetWide(IF21c), // 21c
	SgetObject(IF21c), // 21c
	SgetBoolean(IF21c), // 21c
	SgetByte(IF21c), // 21c
	SgetChar(IF21c), // 21c
	SgetShort(IF21c), // 21c
	Sput(IF21c), // 21c
	SputWide(IF21c), // 21c
	SputObject(IF21c), // 21c
	SputBoolean(IF21c), // 21c
	SputByte(IF21c), // 21c
	SputChar(IF21c), // 21c
	SputShort(IF21c), // 21c
	InvokeVirtual(IF35c), // 35c
	InvokeSuper(IF35c), // 35c
	InvokeDirect(IF35c), // 35c
	InvokeStatic(IF35c), // 35c
	InvokeInterface(IF35c), // 35c
	InvokeVirtualRange(IF3rc), // 3rc
	InvokeSuperRange(IF3rc), // 3rc
	InvokeDirectRange(IF3rc), // 3rc
	InvokeStaticRange(IF3rc), // 3rc
	InvokeInterfaceRange(IF3rc), // 3rc
	NegInt(IF12x), // 12x
	NotInt(IF12x), // 12x
	NegLong(IF12x), // 12x
	NotLong(IF12x), // 12x
	NegFloat(IF12x), // 12x
	NegDouble(IF12x), // 12x
	IntToLong(IF12x), // 12x
	IntToFloat(IF12x), // 12x
	IntToDouble(IF12x), // 12x
	LongToInt(IF12x), // 12x
	LongToFloat(IF12x), // 12x
	LongToDouble(IF12x), // 12x
	FloatToInt(IF12x), // 12x
	FloatToLong(IF12x), // 12x
	FloatToDouble(IF12x), // 12x
	DoubleToInt(IF12x), // 12x
	DoubleToLong(IF12x), // 12x
	DoubleToFloat(IF12x), // 12x
	IntToByte(IF12x), // 12x
	IntToChar(IF12x), // 12x
	IntToShort(IF12x), // 12x
	AddInt(IF23x), // 23x
	SubInt(IF23x), // 23x
	MulInt(IF23x), // 23x
	DivInt(IF23x), // 23x
	RemInt(IF23x), // 23x
	AndInt(IF23x), // 23x
	OrInt(IF23x), // 23x
	XorInt(IF23x), // 23x
	ShlInt(IF23x), // 23x
	ShrInt(IF23x), // 23x
	UshrInt(IF23x), // 23x
	AddLong(IF23x), // 23x
	SubLong(IF23x), // 23x
	MulLong(IF23x), // 23x
	DivLong(IF23x), // 23x
	RemLong(IF23x), // 23x
	AndLong(IF23x), // 23x
	OrLong(IF23x), // 23x
	XorLong(IF23x), // 23x
	ShlLong(IF23x), // 23x
	ShrLong(IF23x), // 23x
	UshrLong(IF23x), // 23x
	AddFloat(IF23x), // 23x
	SubFloat(IF23x), // 23x
	MulFloat(IF23x), // 23x
	DivFloat(IF23x), // 23x
	RemFloat(IF23x), // 23x
	AddDouble(IF23x), // 23x
	SubDouble(IF23x), // 23x
	MulDouble(IF23x), // 23x
	DivDouble(IF23x), // 23x
	RemDouble(IF23x), // 23x
	AddInt2addr(IF12x), // 12x
	SubInt2addr(IF12x), // 12x
	MulInt2addr(IF12x), // 12x
	DivInt2addr(IF12x), // 12x
	RemInt2addr(IF12x), // 12x
	AndInt2addr(IF12x), // 12x
	OrInt2addr(IF12x), // 12x
	XorInt2addr(IF12x), // 12x
	ShlInt2addr(IF12x), // 12x
	ShrInt2addr(IF12x), // 12x
	UshrInt2addr(IF12x), // 12x
	AddLong2addr(IF12x), // 12x
	SubLong2addr(IF12x), // 12x
	MulLong2addr(IF12x), // 12x
	DivLong2addr(IF12x), // 12x
	RemLong2addr(IF12x), // 12x
	AndLong2addr(IF12x), // 12x
	OrLong2addr(IF12x), // 12x
	XorLong2addr(IF12x), // 12x
	ShlLong2addr(IF12x), // 12x
	ShrLong2addr(IF12x), // 12x
	UshrLong2addr(IF12x), // 12x
	AddFloat2addr(IF12x), // 12x
	SubFloat2addr(IF12x), // 12x
	MulFloat2addr(IF12x), // 12x
	DivFloat2addr(IF12x), // 12x
	RemFloat2addr(IF12x), // 12x
	AddDouble2addr(IF12x), // 12x
	SubDouble2addr(IF12x), // 12x
	MulDouble2addr(IF12x), // 12x
	DivDouble2addr(IF12x), // 12x
	RemDouble2addr(IF12x), // 12x
	AddIntLit16(IF22s), // 22s
	RsubInt(IF22s), // 22s
	MulIntLit16(IF22s), // 22s
	DivIntLit16(IF22s), // 22s
	RemIntLit16(IF22s), // 22s
	AndIntLit16(IF22s), // 22s
	OrIntLit16(IF22s), // 22s
	XorIntLit16(IF22s), // 22s
	AddIntLit8(IF22b), // 22b
	RsubIntLit8(IF22b), // 22b
	MulIntLit8(IF22b), // 22b
	DivIntLit8(IF22b), // 22b
	RemIntLit8(IF22b), // 22b
	AndIntLit8(IF22b), // 22b
	OrIntLit8(IF22b), // 22b
	XorIntLit8(IF22b), // 22b
	ShlIntLit8(IF22b), // 22b
	ShrIntLit8(IF22b), // 22b
	UshrIntLit8(IF22b), // 22b
	IgetVolatile(IF22c), // 22c
	IputVolatile(IF22c), // 22c
	SgetVolatile(IF21c), // 21c
	SputVolatile(IF21c), // 21c
	IgetObjectVolatile(IF22c), // 22c
	IgetWideVolatile(IF22c), // 22c
	IputWideVolatile(IF22c), // 22c
	SgetWideVolatile(IF21c), // 21c
	SputWideVolatile(IF21c), // 21c
	Breakpoint(IF00x), // 00x
	ThrowVerificationError(IF20bc), // 20bc
	ExecuteInline(IF35mi), // 35mi
	ExecuteInlineRange(IF3rmi), // 3rmi
	InvokeObjectInitRange(IF35c), // 35c
	ReturnVoidBarrier(IF10x), // 10x
	IgetQuick(IF22cs), // 22cs
	IgetWideQuick(IF22cs), // 22cs
	IgetObjectQuick(IF22cs), // 22cs
	IputQuick(IF22cs), // 22cs
	IputWideQuick(IF22cs), // 22cs
	IputObjectQuick(IF22cs), // 22cs
	InvokeVirtualQuick(IF35ms), // 35ms
	InvokeVirtualQuickRange(IF3rms), // 3rms
	InvokeSuperQuick(IF35ms), // 35ms
	InvokeSuperQuickRange(IF3rms), // 3rms
	IputObjectVolatile(IF22c), // 22c
	SgetObjectVolatile(IF21c), // 21c
	SputObjectVolatile(IF21c), // 21c
}

pub fn parse_instruction(q: &mut InstructionQueue) -> Result<ASTInstruction, ParserError> {
	//todo Praser fn
	let op_code = q.incr()?;
	match op_code {
		0x00 => Ok(ASTInstruction::Nop(instr_format!(10x, q))),
		0x01 => Ok(ASTInstruction::Move(instr_format!(12x, q))),
		0x02 => Ok(ASTInstruction::MoveFrom16(instr_format!(22x, q))),
		0x03 => Ok(ASTInstruction::Move16(instr_format!(32x, q))),
		0x04 => Ok(ASTInstruction::MoveWide(instr_format!(12x, q))),
		0x05 => Ok(ASTInstruction::MoveWideFrom16(instr_format!(22x, q))),
		0x06 => Ok(ASTInstruction::MoveWide16(instr_format!(32x, q))),
		0x07 => Ok(ASTInstruction::MoveObject(instr_format!(12x, q))),
		0x08 => Ok(ASTInstruction::MoveObjectFrom16(instr_format!(22x, q))),
		0x09 => Ok(ASTInstruction::MoveObject16(instr_format!(32x, q))),
		0x0a => Ok(ASTInstruction::MoveResult(instr_format!(11x, q))),
		0x0b => Ok(ASTInstruction::MoveResultWide(instr_format!(11x, q))),
		0x0c => Ok(ASTInstruction::MoveResultObject(instr_format!(11x, q))),
		0x0d => Ok(ASTInstruction::MoveException(instr_format!(11x, q))),
		0x0e => Ok(ASTInstruction::ReturnVoid(instr_format!(10x, q))),
		0x0f => Ok(ASTInstruction::Return(instr_format!(11x, q))),
		0x10 => Ok(ASTInstruction::ReturnWide(instr_format!(11x, q))),
		0x11 => Ok(ASTInstruction::ReturnObject(instr_format!(11x, q))),
		0x12 => Ok(ASTInstruction::Const4(instr_format!(11n, q))),
		0x13 => Ok(ASTInstruction::Const16(instr_format!(21s, q))),
		0x14 => Ok(ASTInstruction::Const(instr_format!(31i, q))),
		0x15 => Ok(ASTInstruction::ConstHigh16(instr_format!(21h, q))),
		0x16 => Ok(ASTInstruction::ConstWide16(instr_format!(21s, q))),
		0x17 => Ok(ASTInstruction::ConstWide32(instr_format!(31i, q))),
		0x18 => Ok(ASTInstruction::ConstWide(instr_format!(51l, q))),
		0x19 => Ok(ASTInstruction::ConstWideHigh16(instr_format!(21h, q))),
		0x1a => Ok(ASTInstruction::ConstString(instr_format!(21c, q))),
		0x1b => Ok(ASTInstruction::ConstStringJumbo(instr_format!(31c, q))),
		0x1c => Ok(ASTInstruction::ConstClass(instr_format!(21c, q))),
		0x1d => Ok(ASTInstruction::MonitorEnter(instr_format!(11x, q))),
		0x1e => Ok(ASTInstruction::MonitorExit(instr_format!(11x, q))),
		0x1f => Ok(ASTInstruction::CheckCast(instr_format!(21c, q))),
		0x20 => Ok(ASTInstruction::InstanceOf(instr_format!(22c, q))),
		0x21 => Ok(ASTInstruction::ArrayLength(instr_format!(12x, q))),
		0x22 => Ok(ASTInstruction::NewInstance(instr_format!(21c, q))),
		0x23 => Ok(ASTInstruction::NewArray(instr_format!(22c, q))),
		0x24 => Ok(ASTInstruction::FilledNewArray(instr_format!(35c, q))),
		0x25 => Ok(ASTInstruction::FilledNewArrayRange(instr_format!(3rc, q))),
		0x26 => Ok(ASTInstruction::FillArrayData(instr_format!(FillArrayData, q))),
		0x27 => Ok(ASTInstruction::Throw(instr_format!(11x, q))),
		0x28 => Ok(ASTInstruction::Goto(instr_format!(10t, q))),
		0x29 => Ok(ASTInstruction::Goto16(instr_format!(20t, q))),
		0x2a => Ok(ASTInstruction::Goto32(instr_format!(30t, q))),
		0x2b => Ok(ASTInstruction::PackedSwitch(instr_format!(PackedSwitch, q))),
		0x2c => Ok(ASTInstruction::SparseSwitch(instr_format!(SparseSwitch, q))),
		0x2d => Ok(ASTInstruction::CmplFloat(instr_format!(23x, q))),
		0x2e => Ok(ASTInstruction::CmpgFloat(instr_format!(23x, q))),
		0x2f => Ok(ASTInstruction::CmplDouble(instr_format!(23x, q))),
		0x30 => Ok(ASTInstruction::CmpgDouble(instr_format!(23x, q))),
		0x31 => Ok(ASTInstruction::CmpLong(instr_format!(23x, q))),
		0x32 => Ok(ASTInstruction::IfEq(instr_format!(22t, q))),
		0x33 => Ok(ASTInstruction::IfNe(instr_format!(22t, q))),
		0x34 => Ok(ASTInstruction::IfLt(instr_format!(22t, q))),
		0x35 => Ok(ASTInstruction::IfGe(instr_format!(22t, q))),
		0x36 => Ok(ASTInstruction::IfGt(instr_format!(22t, q))),
		0x37 => Ok(ASTInstruction::IfLe(instr_format!(22t, q))),
		0x38 => Ok(ASTInstruction::IfEqz(instr_format!(21t, q))),
		0x39 => Ok(ASTInstruction::IfNez(instr_format!(21t, q))),
		0x3a => Ok(ASTInstruction::IfLtz(instr_format!(21t, q))),
		0x3b => Ok(ASTInstruction::IfGez(instr_format!(21t, q))),
		0x3c => Ok(ASTInstruction::IfGtz(instr_format!(21t, q))),
		0x3d => Ok(ASTInstruction::IfLez(instr_format!(21t, q))),
		0x3e => unreachable!(),
		0x3f => unreachable!(),
		0x40 => unreachable!(),
		0x41 => unreachable!(),
		0x42 => unreachable!(),
		0x43 => unreachable!(),
		0x44 => Ok(ASTInstruction::Aget(instr_format!(23x, q))),
		0x45 => Ok(ASTInstruction::AgetWide(instr_format!(23x, q))),
		0x46 => Ok(ASTInstruction::AgetObject(instr_format!(23x, q))),
		0x47 => Ok(ASTInstruction::AgetBoolean(instr_format!(23x, q))),
		0x48 => Ok(ASTInstruction::AgetByte(instr_format!(23x, q))),
		0x49 => Ok(ASTInstruction::AgetChar(instr_format!(23x, q))),
		0x4a => Ok(ASTInstruction::AgetShort(instr_format!(23x, q))),
		0x4b => Ok(ASTInstruction::Aput(instr_format!(23x, q))),
		0x4c => Ok(ASTInstruction::AputWide(instr_format!(23x, q))),
		0x4d => Ok(ASTInstruction::AputObject(instr_format!(23x, q))),
		0x4e => Ok(ASTInstruction::AputBoolean(instr_format!(23x, q))),
		0x4f => Ok(ASTInstruction::AputByte(instr_format!(23x, q))),
		0x50 => Ok(ASTInstruction::AputChar(instr_format!(23x, q))),
		0x51 => Ok(ASTInstruction::AputShort(instr_format!(23x, q))),
		0x52 => Ok(ASTInstruction::Iget(instr_format!(22c, q))),
		0x53 => Ok(ASTInstruction::IgetWide(instr_format!(22c, q))),
		0x54 => Ok(ASTInstruction::IgetObject(instr_format!(22c, q))),
		0x55 => Ok(ASTInstruction::IgetBoolean(instr_format!(22c, q))),
		0x56 => Ok(ASTInstruction::IgetByte(instr_format!(22c, q))),
		0x57 => Ok(ASTInstruction::IgetChar(instr_format!(22c, q))),
		0x58 => Ok(ASTInstruction::IgetShort(instr_format!(22c, q))),
		0x59 => Ok(ASTInstruction::Iput(instr_format!(22c, q))),
		0x5a => Ok(ASTInstruction::IputWide(instr_format!(22c, q))),
		0x5b => Ok(ASTInstruction::IputObject(instr_format!(22c, q))),
		0x5c => Ok(ASTInstruction::IputBoolean(instr_format!(22c, q))),
		0x5d => Ok(ASTInstruction::IputByte(instr_format!(22c, q))),
		0x5e => Ok(ASTInstruction::IputChar(instr_format!(22c, q))),
		0x5f => Ok(ASTInstruction::IputShort(instr_format!(22c, q))),
		0x60 => Ok(ASTInstruction::Sget(instr_format!(21c, q))),
		0x61 => Ok(ASTInstruction::SgetWide(instr_format!(21c, q))),
		0x62 => Ok(ASTInstruction::SgetObject(instr_format!(21c, q))),
		0x63 => Ok(ASTInstruction::SgetBoolean(instr_format!(21c, q))),
		0x64 => Ok(ASTInstruction::SgetByte(instr_format!(21c, q))),
		0x65 => Ok(ASTInstruction::SgetChar(instr_format!(21c, q))),
		0x66 => Ok(ASTInstruction::SgetShort(instr_format!(21c, q))),
		0x67 => Ok(ASTInstruction::Sput(instr_format!(21c, q))),
		0x68 => Ok(ASTInstruction::SputWide(instr_format!(21c, q))),
		0x69 => Ok(ASTInstruction::SputObject(instr_format!(21c, q))),
		0x6a => Ok(ASTInstruction::SputBoolean(instr_format!(21c, q))),
		0x6b => Ok(ASTInstruction::SputByte(instr_format!(21c, q))),
		0x6c => Ok(ASTInstruction::SputChar(instr_format!(21c, q))),
		0x6d => Ok(ASTInstruction::SputShort(instr_format!(21c, q))),
		0x6e => Ok(ASTInstruction::InvokeVirtual(instr_format!(35c, q))),
		0x6f => Ok(ASTInstruction::InvokeSuper(instr_format!(35c, q))),
		0x70 => Ok(ASTInstruction::InvokeDirect(instr_format!(35c, q))),
		0x71 => Ok(ASTInstruction::InvokeStatic(instr_format!(35c, q))),
		0x72 => Ok(ASTInstruction::InvokeInterface(instr_format!(35c, q))),
		0x73 => unreachable!(),
		0x74 => Ok(ASTInstruction::InvokeVirtualRange(instr_format!(3rc, q))),
		0x75 => Ok(ASTInstruction::InvokeSuperRange(instr_format!(3rc, q))),
		0x76 => Ok(ASTInstruction::InvokeDirectRange(instr_format!(3rc, q))),
		0x77 => Ok(ASTInstruction::InvokeStaticRange(instr_format!(3rc, q))),
		0x78 => Ok(ASTInstruction::InvokeInterfaceRange(instr_format!(3rc, q))),
		0x79 => unreachable!(),
		0x7a => unreachable!(),
		0x7b => Ok(ASTInstruction::NegInt(instr_format!(12x, q))),
		0x7c => Ok(ASTInstruction::NotInt(instr_format!(12x, q))),
		0x7d => Ok(ASTInstruction::NegLong(instr_format!(12x, q))),
		0x7e => Ok(ASTInstruction::NotLong(instr_format!(12x, q))),
		0x7f => Ok(ASTInstruction::NegFloat(instr_format!(12x, q))),
		0x80 => Ok(ASTInstruction::NegDouble(instr_format!(12x, q))),
		0x81 => Ok(ASTInstruction::IntToLong(instr_format!(12x, q))),
		0x82 => Ok(ASTInstruction::IntToFloat(instr_format!(12x, q))),
		0x83 => Ok(ASTInstruction::IntToDouble(instr_format!(12x, q))),
		0x84 => Ok(ASTInstruction::LongToInt(instr_format!(12x, q))),
		0x85 => Ok(ASTInstruction::LongToFloat(instr_format!(12x, q))),
		0x86 => Ok(ASTInstruction::LongToDouble(instr_format!(12x, q))),
		0x87 => Ok(ASTInstruction::FloatToInt(instr_format!(12x, q))),
		0x88 => Ok(ASTInstruction::FloatToLong(instr_format!(12x, q))),
		0x89 => Ok(ASTInstruction::FloatToDouble(instr_format!(12x, q))),
		0x8a => Ok(ASTInstruction::DoubleToInt(instr_format!(12x, q))),
		0x8b => Ok(ASTInstruction::DoubleToLong(instr_format!(12x, q))),
		0x8c => Ok(ASTInstruction::DoubleToFloat(instr_format!(12x, q))),
		0x8d => Ok(ASTInstruction::IntToByte(instr_format!(12x, q))),
		0x8e => Ok(ASTInstruction::IntToChar(instr_format!(12x, q))),
		0x8f => Ok(ASTInstruction::IntToShort(instr_format!(12x, q))),
		0x90 => Ok(ASTInstruction::AddInt(instr_format!(23x, q))),
		0x91 => Ok(ASTInstruction::SubInt(instr_format!(23x, q))),
		0x92 => Ok(ASTInstruction::MulInt(instr_format!(23x, q))),
		0x93 => Ok(ASTInstruction::DivInt(instr_format!(23x, q))),
		0x94 => Ok(ASTInstruction::RemInt(instr_format!(23x, q))),
		0x95 => Ok(ASTInstruction::AndInt(instr_format!(23x, q))),
		0x96 => Ok(ASTInstruction::OrInt(instr_format!(23x, q))),
		0x97 => Ok(ASTInstruction::XorInt(instr_format!(23x, q))),
		0x98 => Ok(ASTInstruction::ShlInt(instr_format!(23x, q))),
		0x99 => Ok(ASTInstruction::ShrInt(instr_format!(23x, q))),
		0x9a => Ok(ASTInstruction::UshrInt(instr_format!(23x, q))),
		0x9b => Ok(ASTInstruction::AddLong(instr_format!(23x, q))),
		0x9c => Ok(ASTInstruction::SubLong(instr_format!(23x, q))),
		0x9d => Ok(ASTInstruction::MulLong(instr_format!(23x, q))),
		0x9e => Ok(ASTInstruction::DivLong(instr_format!(23x, q))),
		0x9f => Ok(ASTInstruction::RemLong(instr_format!(23x, q))),
		0xa0 => Ok(ASTInstruction::AndLong(instr_format!(23x, q))),
		0xa1 => Ok(ASTInstruction::OrLong(instr_format!(23x, q))),
		0xa2 => Ok(ASTInstruction::XorLong(instr_format!(23x, q))),
		0xa3 => Ok(ASTInstruction::ShlLong(instr_format!(23x, q))),
		0xa4 => Ok(ASTInstruction::ShrLong(instr_format!(23x, q))),
		0xa5 => Ok(ASTInstruction::UshrLong(instr_format!(23x, q))),
		0xa6 => Ok(ASTInstruction::AddFloat(instr_format!(23x, q))),
		0xa7 => Ok(ASTInstruction::SubFloat(instr_format!(23x, q))),
		0xa8 => Ok(ASTInstruction::MulFloat(instr_format!(23x, q))),
		0xa9 => Ok(ASTInstruction::DivFloat(instr_format!(23x, q))),
		0xaa => Ok(ASTInstruction::RemFloat(instr_format!(23x, q))),
		0xab => Ok(ASTInstruction::AddDouble(instr_format!(23x, q))),
		0xac => Ok(ASTInstruction::SubDouble(instr_format!(23x, q))),
		0xad => Ok(ASTInstruction::MulDouble(instr_format!(23x, q))),
		0xae => Ok(ASTInstruction::DivDouble(instr_format!(23x, q))),
		0xaf => Ok(ASTInstruction::RemDouble(instr_format!(23x, q))),
		0xb0 => Ok(ASTInstruction::AddInt2addr(instr_format!(12x, q))),
		0xb1 => Ok(ASTInstruction::SubInt2addr(instr_format!(12x, q))),
		0xb2 => Ok(ASTInstruction::MulInt2addr(instr_format!(12x, q))),
		0xb3 => Ok(ASTInstruction::DivInt2addr(instr_format!(12x, q))),
		0xb4 => Ok(ASTInstruction::RemInt2addr(instr_format!(12x, q))),
		0xb5 => Ok(ASTInstruction::AndInt2addr(instr_format!(12x, q))),
		0xb6 => Ok(ASTInstruction::OrInt2addr(instr_format!(12x, q))),
		0xb7 => Ok(ASTInstruction::XorInt2addr(instr_format!(12x, q))),
		0xb8 => Ok(ASTInstruction::ShlInt2addr(instr_format!(12x, q))),
		0xb9 => Ok(ASTInstruction::ShrInt2addr(instr_format!(12x, q))),
		0xba => Ok(ASTInstruction::UshrInt2addr(instr_format!(12x, q))),
		0xbb => Ok(ASTInstruction::AddLong2addr(instr_format!(12x, q))),
		0xbc => Ok(ASTInstruction::SubLong2addr(instr_format!(12x, q))),
		0xbd => Ok(ASTInstruction::MulLong2addr(instr_format!(12x, q))),
		0xbe => Ok(ASTInstruction::DivLong2addr(instr_format!(12x, q))),
		0xbf => Ok(ASTInstruction::RemLong2addr(instr_format!(12x, q))),
		0xc0 => Ok(ASTInstruction::AndLong2addr(instr_format!(12x, q))),
		0xc1 => Ok(ASTInstruction::OrLong2addr(instr_format!(12x, q))),
		0xc2 => Ok(ASTInstruction::XorLong2addr(instr_format!(12x, q))),
		0xc3 => Ok(ASTInstruction::ShlLong2addr(instr_format!(12x, q))),
		0xc4 => Ok(ASTInstruction::ShrLong2addr(instr_format!(12x, q))),
		0xc5 => Ok(ASTInstruction::UshrLong2addr(instr_format!(12x, q))),
		0xc6 => Ok(ASTInstruction::AddFloat2addr(instr_format!(12x, q))),
		0xc7 => Ok(ASTInstruction::SubFloat2addr(instr_format!(12x, q))),
		0xc8 => Ok(ASTInstruction::MulFloat2addr(instr_format!(12x, q))),
		0xc9 => Ok(ASTInstruction::DivFloat2addr(instr_format!(12x, q))),
		0xca => Ok(ASTInstruction::RemFloat2addr(instr_format!(12x, q))),
		0xcb => Ok(ASTInstruction::AddDouble2addr(instr_format!(12x, q))),
		0xcc => Ok(ASTInstruction::SubDouble2addr(instr_format!(12x, q))),
		0xcd => Ok(ASTInstruction::MulDouble2addr(instr_format!(12x, q))),
		0xce => Ok(ASTInstruction::DivDouble2addr(instr_format!(12x, q))),
		0xcf => Ok(ASTInstruction::RemDouble2addr(instr_format!(12x, q))),
		0xd0 => Ok(ASTInstruction::AddIntLit16(instr_format!(22s, q))),
		0xd1 => Ok(ASTInstruction::RsubInt(instr_format!(22s, q))),
		0xd2 => Ok(ASTInstruction::MulIntLit16(instr_format!(22s, q))),
		0xd3 => Ok(ASTInstruction::DivIntLit16(instr_format!(22s, q))),
		0xd4 => Ok(ASTInstruction::RemIntLit16(instr_format!(22s, q))),
		0xd5 => Ok(ASTInstruction::AndIntLit16(instr_format!(22s, q))),
		0xd6 => Ok(ASTInstruction::OrIntLit16(instr_format!(22s, q))),
		0xd7 => Ok(ASTInstruction::XorIntLit16(instr_format!(22s, q))),
		0xd8 => Ok(ASTInstruction::AddIntLit8(instr_format!(22b, q))),
		0xd9 => Ok(ASTInstruction::RsubIntLit8(instr_format!(22b, q))),
		0xda => Ok(ASTInstruction::MulIntLit8(instr_format!(22b, q))),
		0xdb => Ok(ASTInstruction::DivIntLit8(instr_format!(22b, q))),
		0xdc => Ok(ASTInstruction::RemIntLit8(instr_format!(22b, q))),
		0xdd => Ok(ASTInstruction::AndIntLit8(instr_format!(22b, q))),
		0xde => Ok(ASTInstruction::OrIntLit8(instr_format!(22b, q))),
		0xdf => Ok(ASTInstruction::XorIntLit8(instr_format!(22b, q))),
		0xe0 => Ok(ASTInstruction::ShlIntLit8(instr_format!(22b, q))),
		0xe1 => Ok(ASTInstruction::ShrIntLit8(instr_format!(22b, q))),
		0xe2 => Ok(ASTInstruction::UshrIntLit8(instr_format!(22b, q))),
		0xe3 => Ok(ASTInstruction::IgetVolatile(instr_format!(22c, q))),
		0xe4 => Ok(ASTInstruction::IputVolatile(instr_format!(22c, q))),
		0xe5 => Ok(ASTInstruction::SgetVolatile(instr_format!(21c, q))),
		0xe6 => Ok(ASTInstruction::SputVolatile(instr_format!(21c, q))),
		0xe7 => Ok(ASTInstruction::IgetObjectVolatile(instr_format!(22c, q))),
		0xe8 => Ok(ASTInstruction::IgetWideVolatile(instr_format!(22c, q))),
		0xe9 => Ok(ASTInstruction::IputWideVolatile(instr_format!(22c, q))),
		0xea => Ok(ASTInstruction::SgetWideVolatile(instr_format!(21c, q))),
		0xeb => Ok(ASTInstruction::SputWideVolatile(instr_format!(21c, q))),
		0xec => Ok(ASTInstruction::Breakpoint(instr_format!(00x, q))),
		0xed => Ok(ASTInstruction::ThrowVerificationError(instr_format!(20bc, q))),
		0xee => Ok(ASTInstruction::ExecuteInline(instr_format!(35mi, q))),
		0xef => Ok(ASTInstruction::ExecuteInlineRange(instr_format!(3rmi, q))),
		0xf0 => Ok(ASTInstruction::InvokeObjectInitRange(instr_format!(35c, q))),
		0xf1 => Ok(ASTInstruction::ReturnVoidBarrier(instr_format!(10x, q))),
		0xf2 => Ok(ASTInstruction::IgetQuick(instr_format!(22cs, q))),
		0xf3 => Ok(ASTInstruction::IgetWideQuick(instr_format!(22cs, q))),
		0xf4 => Ok(ASTInstruction::IgetObjectQuick(instr_format!(22cs, q))),
		0xf5 => Ok(ASTInstruction::IputQuick(instr_format!(22cs, q))),
		0xf6 => Ok(ASTInstruction::IputWideQuick(instr_format!(22cs, q))),
		0xf7 => Ok(ASTInstruction::IputObjectQuick(instr_format!(22cs, q))),
		0xf8 => Ok(ASTInstruction::InvokeVirtualQuick(instr_format!(35ms, q))),
		0xf9 => Ok(ASTInstruction::InvokeVirtualQuickRange(instr_format!(3rms, q))),
		0xfa => Ok(ASTInstruction::InvokeSuperQuick(instr_format!(35ms, q))),
		0xfb => Ok(ASTInstruction::InvokeSuperQuickRange(instr_format!(3rms, q))),
		0xfc => Ok(ASTInstruction::IputObjectVolatile(instr_format!(22c, q))),
		0xfd => Ok(ASTInstruction::SgetObjectVolatile(instr_format!(21c, q))),
		0xfe => Ok(ASTInstruction::SputObjectVolatile(instr_format!(21c, q))),
		0xff => unreachable!(),
	}
}

pub fn instruction_length(instr: &ASTInstruction) -> u8 {
	match instr {
		ASTInstruction::Nop(_) => 2,
		ASTInstruction::Move(_) => 2,
		ASTInstruction::MoveFrom16(_) => 4,
		ASTInstruction::Move16(_) => 6,
		ASTInstruction::MoveWide(_) => 2,
		ASTInstruction::MoveWideFrom16(_) => 4,
		ASTInstruction::MoveWide16(_) => 6,
		ASTInstruction::MoveObject(_) => 2,
		ASTInstruction::MoveObjectFrom16(_) => 4,
		ASTInstruction::MoveObject16(_) => 6,
		ASTInstruction::MoveResult(_) => 2,
		ASTInstruction::MoveResultWide(_) => 2,
		ASTInstruction::MoveResultObject(_) => 2,
		ASTInstruction::MoveException(_) => 2,
		ASTInstruction::ReturnVoid(_) => 2,
		ASTInstruction::Return(_) => 2,
		ASTInstruction::ReturnWide(_) => 2,
		ASTInstruction::ReturnObject(_) => 2,
		ASTInstruction::Const4(_) => 2,
		ASTInstruction::Const16(_) => 4,
		ASTInstruction::Const(_) => 6,
		ASTInstruction::ConstHigh16(_) => 4,
		ASTInstruction::ConstWide16(_) => 4,
		ASTInstruction::ConstWide32(_) => 6,
		ASTInstruction::ConstWide(_) => 10,
		ASTInstruction::ConstWideHigh16(_) => 4,
		ASTInstruction::ConstString(_) => 4,
		ASTInstruction::ConstStringJumbo(_) => 6,
		ASTInstruction::ConstClass(_) => 4,
		ASTInstruction::MonitorEnter(_) => 2,
		ASTInstruction::MonitorExit(_) => 2,
		ASTInstruction::CheckCast(_) => 4,
		ASTInstruction::InstanceOf(_) => 4,
		ASTInstruction::ArrayLength(_) => 2,
		ASTInstruction::NewInstance(_) => 4,
		ASTInstruction::NewArray(_) => 4,
		ASTInstruction::FilledNewArray(_) => 6,
		ASTInstruction::FilledNewArrayRange(_) => 6,
		ASTInstruction::FillArrayData(_) => 6,
		ASTInstruction::Throw(_) => 2,
		ASTInstruction::Goto(_) => 2,
		ASTInstruction::Goto16(_) => 4,
		ASTInstruction::Goto32(_) => 6,
		ASTInstruction::PackedSwitch(_) => 6,
		ASTInstruction::SparseSwitch(_) => 6,
		ASTInstruction::CmplFloat(_) => 4,
		ASTInstruction::CmpgFloat(_) => 4,
		ASTInstruction::CmplDouble(_) => 4,
		ASTInstruction::CmpgDouble(_) => 4,
		ASTInstruction::CmpLong(_) => 4,
		ASTInstruction::IfEq(_) => 4,
		ASTInstruction::IfNe(_) => 4,
		ASTInstruction::IfLt(_) => 4,
		ASTInstruction::IfGe(_) => 4,
		ASTInstruction::IfGt(_) => 4,
		ASTInstruction::IfLe(_) => 4,
		ASTInstruction::IfEqz(_) => 4,
		ASTInstruction::IfNez(_) => 4,
		ASTInstruction::IfLtz(_) => 4,
		ASTInstruction::IfGez(_) => 4,
		ASTInstruction::IfGtz(_) => 4,
		ASTInstruction::IfLez(_) => 4,
		ASTInstruction::Aget(_) => 4,
		ASTInstruction::AgetWide(_) => 4,
		ASTInstruction::AgetObject(_) => 4,
		ASTInstruction::AgetBoolean(_) => 4,
		ASTInstruction::AgetByte(_) => 4,
		ASTInstruction::AgetChar(_) => 4,
		ASTInstruction::AgetShort(_) => 4,
		ASTInstruction::Aput(_) => 4,
		ASTInstruction::AputWide(_) => 4,
		ASTInstruction::AputObject(_) => 4,
		ASTInstruction::AputBoolean(_) => 4,
		ASTInstruction::AputByte(_) => 4,
		ASTInstruction::AputChar(_) => 4,
		ASTInstruction::AputShort(_) => 4,
		ASTInstruction::Iget(_) => 4,
		ASTInstruction::IgetWide(_) => 4,
		ASTInstruction::IgetObject(_) => 4,
		ASTInstruction::IgetBoolean(_) => 4,
		ASTInstruction::IgetByte(_) => 4,
		ASTInstruction::IgetChar(_) => 4,
		ASTInstruction::IgetShort(_) => 4,
		ASTInstruction::Iput(_) => 4,
		ASTInstruction::IputWide(_) => 4,
		ASTInstruction::IputObject(_) => 4,
		ASTInstruction::IputBoolean(_) => 4,
		ASTInstruction::IputByte(_) => 4,
		ASTInstruction::IputChar(_) => 4,
		ASTInstruction::IputShort(_) => 4,
		ASTInstruction::Sget(_) => 4,
		ASTInstruction::SgetWide(_) => 4,
		ASTInstruction::SgetObject(_) => 4,
		ASTInstruction::SgetBoolean(_) => 4,
		ASTInstruction::SgetByte(_) => 4,
		ASTInstruction::SgetChar(_) => 4,
		ASTInstruction::SgetShort(_) => 4,
		ASTInstruction::Sput(_) => 4,
		ASTInstruction::SputWide(_) => 4,
		ASTInstruction::SputObject(_) => 4,
		ASTInstruction::SputBoolean(_) => 4,
		ASTInstruction::SputByte(_) => 4,
		ASTInstruction::SputChar(_) => 4,
		ASTInstruction::SputShort(_) => 4,
		ASTInstruction::InvokeVirtual(_) => 6,
		ASTInstruction::InvokeSuper(_) => 6,
		ASTInstruction::InvokeDirect(_) => 6,
		ASTInstruction::InvokeStatic(_) => 6,
		ASTInstruction::InvokeInterface(_) => 6,
		ASTInstruction::InvokeVirtualRange(_) => 6,
		ASTInstruction::InvokeSuperRange(_) => 6,
		ASTInstruction::InvokeDirectRange(_) => 6,
		ASTInstruction::InvokeStaticRange(_) => 6,
		ASTInstruction::InvokeInterfaceRange(_) => 6,
		ASTInstruction::NegInt(_) => 2,
		ASTInstruction::NotInt(_) => 2,
		ASTInstruction::NegLong(_) => 2,
		ASTInstruction::NotLong(_) => 2,
		ASTInstruction::NegFloat(_) => 2,
		ASTInstruction::NegDouble(_) => 2,
		ASTInstruction::IntToLong(_) => 2,
		ASTInstruction::IntToFloat(_) => 2,
		ASTInstruction::IntToDouble(_) => 2,
		ASTInstruction::LongToInt(_) => 2,
		ASTInstruction::LongToFloat(_) => 2,
		ASTInstruction::LongToDouble(_) => 2,
		ASTInstruction::FloatToInt(_) => 2,
		ASTInstruction::FloatToLong(_) => 2,
		ASTInstruction::FloatToDouble(_) => 2,
		ASTInstruction::DoubleToInt(_) => 2,
		ASTInstruction::DoubleToLong(_) => 2,
		ASTInstruction::DoubleToFloat(_) => 2,
		ASTInstruction::IntToByte(_) => 2,
		ASTInstruction::IntToChar(_) => 2,
		ASTInstruction::IntToShort(_) => 2,
		ASTInstruction::AddInt(_) => 4,
		ASTInstruction::SubInt(_) => 4,
		ASTInstruction::MulInt(_) => 4,
		ASTInstruction::DivInt(_) => 4,
		ASTInstruction::RemInt(_) => 4,
		ASTInstruction::AndInt(_) => 4,
		ASTInstruction::OrInt(_) => 4,
		ASTInstruction::XorInt(_) => 4,
		ASTInstruction::ShlInt(_) => 4,
		ASTInstruction::ShrInt(_) => 4,
		ASTInstruction::UshrInt(_) => 4,
		ASTInstruction::AddLong(_) => 4,
		ASTInstruction::SubLong(_) => 4,
		ASTInstruction::MulLong(_) => 4,
		ASTInstruction::DivLong(_) => 4,
		ASTInstruction::RemLong(_) => 4,
		ASTInstruction::AndLong(_) => 4,
		ASTInstruction::OrLong(_) => 4,
		ASTInstruction::XorLong(_) => 4,
		ASTInstruction::ShlLong(_) => 4,
		ASTInstruction::ShrLong(_) => 4,
		ASTInstruction::UshrLong(_) => 4,
		ASTInstruction::AddFloat(_) => 4,
		ASTInstruction::SubFloat(_) => 4,
		ASTInstruction::MulFloat(_) => 4,
		ASTInstruction::DivFloat(_) => 4,
		ASTInstruction::RemFloat(_) => 4,
		ASTInstruction::AddDouble(_) => 4,
		ASTInstruction::SubDouble(_) => 4,
		ASTInstruction::MulDouble(_) => 4,
		ASTInstruction::DivDouble(_) => 4,
		ASTInstruction::RemDouble(_) => 4,
		ASTInstruction::AddInt2addr(_) => 2,
		ASTInstruction::SubInt2addr(_) => 2,
		ASTInstruction::MulInt2addr(_) => 2,
		ASTInstruction::DivInt2addr(_) => 2,
		ASTInstruction::RemInt2addr(_) => 2,
		ASTInstruction::AndInt2addr(_) => 2,
		ASTInstruction::OrInt2addr(_) => 2,
		ASTInstruction::XorInt2addr(_) => 2,
		ASTInstruction::ShlInt2addr(_) => 2,
		ASTInstruction::ShrInt2addr(_) => 2,
		ASTInstruction::UshrInt2addr(_) => 2,
		ASTInstruction::AddLong2addr(_) => 2,
		ASTInstruction::SubLong2addr(_) => 2,
		ASTInstruction::MulLong2addr(_) => 2,
		ASTInstruction::DivLong2addr(_) => 2,
		ASTInstruction::RemLong2addr(_) => 2,
		ASTInstruction::AndLong2addr(_) => 2,
		ASTInstruction::OrLong2addr(_) => 2,
		ASTInstruction::XorLong2addr(_) => 2,
		ASTInstruction::ShlLong2addr(_) => 2,
		ASTInstruction::ShrLong2addr(_) => 2,
		ASTInstruction::UshrLong2addr(_) => 2,
		ASTInstruction::AddFloat2addr(_) => 2,
		ASTInstruction::SubFloat2addr(_) => 2,
		ASTInstruction::MulFloat2addr(_) => 2,
		ASTInstruction::DivFloat2addr(_) => 2,
		ASTInstruction::RemFloat2addr(_) => 2,
		ASTInstruction::AddDouble2addr(_) => 2,
		ASTInstruction::SubDouble2addr(_) => 2,
		ASTInstruction::MulDouble2addr(_) => 2,
		ASTInstruction::DivDouble2addr(_) => 2,
		ASTInstruction::RemDouble2addr(_) => 2,
		ASTInstruction::AddIntLit16(_) => 4,
		ASTInstruction::RsubInt(_) => 4,
		ASTInstruction::MulIntLit16(_) => 4,
		ASTInstruction::DivIntLit16(_) => 4,
		ASTInstruction::RemIntLit16(_) => 4,
		ASTInstruction::AndIntLit16(_) => 4,
		ASTInstruction::OrIntLit16(_) => 4,
		ASTInstruction::XorIntLit16(_) => 4,
		ASTInstruction::AddIntLit8(_) => 4,
		ASTInstruction::RsubIntLit8(_) => 4,
		ASTInstruction::MulIntLit8(_) => 4,
		ASTInstruction::DivIntLit8(_) => 4,
		ASTInstruction::RemIntLit8(_) => 4,
		ASTInstruction::AndIntLit8(_) => 4,
		ASTInstruction::OrIntLit8(_) => 4,
		ASTInstruction::XorIntLit8(_) => 4,
		ASTInstruction::ShlIntLit8(_) => 4,
		ASTInstruction::ShrIntLit8(_) => 4,
		ASTInstruction::UshrIntLit8(_) => 4,
		ASTInstruction::IgetVolatile(_) => 4,
		ASTInstruction::IputVolatile(_) => 4,
		ASTInstruction::SgetVolatile(_) => 4,
		ASTInstruction::SputVolatile(_) => 4,
		ASTInstruction::IgetObjectVolatile(_) => 4,
		ASTInstruction::IgetWideVolatile(_) => 4,
		ASTInstruction::IputWideVolatile(_) => 4,
		ASTInstruction::SgetWideVolatile(_) => 4,
		ASTInstruction::SputWideVolatile(_) => 4,
		ASTInstruction::Breakpoint(_) => 0,
		ASTInstruction::ThrowVerificationError(_) => 4,
		ASTInstruction::ExecuteInline(_) => 6,
		ASTInstruction::ExecuteInlineRange(_) => 6,
		ASTInstruction::InvokeObjectInitRange(_) => 6,
		ASTInstruction::ReturnVoidBarrier(_) => 2,
		ASTInstruction::IgetQuick(_) => 4,
		ASTInstruction::IgetWideQuick(_) => 4,
		ASTInstruction::IgetObjectQuick(_) => 4,
		ASTInstruction::IputQuick(_) => 4,
		ASTInstruction::IputWideQuick(_) => 4,
		ASTInstruction::IputObjectQuick(_) => 4,
		ASTInstruction::InvokeVirtualQuick(_) => 6,
		ASTInstruction::InvokeVirtualQuickRange(_) => 6,
		ASTInstruction::InvokeSuperQuick(_) => 6,
		ASTInstruction::InvokeSuperQuickRange(_) => 6,
		ASTInstruction::IputObjectVolatile(_) => 4,
		ASTInstruction::SgetObjectVolatile(_) => 4,
		ASTInstruction::SputObjectVolatile(_) => 4,
	}
}